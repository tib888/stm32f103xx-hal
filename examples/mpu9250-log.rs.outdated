//! Log IMU data from MPU9250

#![deny(unsafe_code)]
#![deny(warnings)]
#![no_std]
#![no_main]

extern crate panic_halt;

use cortex_m::asm;

use byteorder::{ByteOrder, LE};
use crc16::{State, ARC};
use either::Either;
use stm32f103xx_hal::{
    prelude::*,
    device::{SPI1, USART1},
    delay::Delay,
    dma::{dma1, Transfer, R},
    gpio::{
        gpioa::{PA4, PA5, PA6, PA7},
        Alternate, Floating, Input, Output, PushPull
    },
    serial::{Serial, Tx},
    spi::Spi,
    timer::{self, Timer},
};
use mpu9250::{Imu, Mpu9250};
use rtfm::app;

// CONNECTIONS
#[allow(non_camel_case_types)]
type TX_BUF = &'static mut [u8; TX_SZ];

type MPU9250 = Mpu9250<
    Spi<
        SPI1,
        (
            PA5<Alternate<PushPull>>,
            PA6<Input<Floating>>,
            PA7<Alternate<PushPull>>,
        ),
    >,
    PA4<Output<PushPull>>,
    Imu,
>;

type TX = Option<Either<(TX_BUF, dma1::C4, Tx<USART1>), Transfer<R, TX_BUF, dma1::C4, Tx<USART1>>>>;

const TX_SZ: usize = 10;
const FREQ: u32 = 1024;
const SAMPLES: u32 = FREQ * 10;

#[app(device = stm32f103xx_hal::device)]
const APP: () = {
    static mut MPU9250: MPU9250 = ();
    static mut TX: TX = ();

    static mut SAMPLES: u32 = 0;
    static mut TX_BUF: [u8; TX_SZ] = [0; TX_SZ];

    #[init(resources = [TX_BUF])]
    fn init() {
        let mut flash = device.FLASH.constrain();
        let mut rcc = device.RCC.constrain();

        // let clocks = rcc.cfgr.freeze(&mut flash.acr);
        let clocks = rcc.cfgr
            .sysclk(64.mhz())
            .pclk1(32.mhz())
            .freeze(&mut flash.acr);

        let mut afio = device.AFIO.constrain(&mut rcc.apb2);

        let mut gpioa = device.GPIOA.split(&mut rcc.apb2);

        // SERIAL
        let pa9 = gpioa.pa9.into_alternate_push_pull(&mut gpioa.crh);
        let pa10 = gpioa.pa10;

        let serial = Serial::usart1(
            device.USART1,
            (pa9, pa10),
            &mut afio.mapr,
            115_200.bps(),
            clocks,
            &mut rcc.apb2,
        );

        let mut tx = serial.split().0;

        // start COBS frame
        tx.write(0x00).unwrap();

        // DMA
        let channels = device.DMA1.split(&mut rcc.ahb);

        // SPI
        let nss = gpioa.pa4.into_push_pull_output(&mut gpioa.crl);
        let sck = gpioa.pa5.into_alternate_push_pull(&mut gpioa.crl);
        let miso = gpioa.pa6;
        let mosi = gpioa.pa7.into_alternate_push_pull(&mut gpioa.crl);

        let spi = Spi::spi1(
            device.SPI1,
            (sck, miso, mosi),
            &mut afio.mapr,
            mpu9250::MODE,
            1.mhz(),
            clocks,
            &mut rcc.apb2,
        );

        // MPU9250
        let mut delay = Delay::new(core.SYST, clocks);

        let mpu9250 = Mpu9250::imu_default(spi, nss, &mut delay).unwrap();

        Timer::syst(delay.free(), FREQ.hz(), clocks).listen(timer::Event::Update);

        MPU9250 = mpu9250;
        TX = Some(Either::Left((resources.TX_BUF, channels.4, tx)));
    }

    #[interrupt(resources = [MPU9250, SAMPLES, TX])]
    fn SysTick() {
        let (ary, arz, _, gx) = resources.MPU9250.aryz_t_gx().unwrap();

        let (buf, c, tx) = match resources.TX.take().unwrap() {
            Either::Left((buf, c, tx)) => (buf, c, tx),
            Either::Right(trans) => trans.wait(),
        };

        let mut data = [0; TX_SZ - 2];

        LE::write_i16(&mut data[0..2], ary);
        LE::write_i16(&mut data[2..4], arz);
        LE::write_i16(&mut data[4..6], gx);

        let crc = State::<ARC>::calculate(&data[..TX_SZ - 4]);
        LE::write_u16(&mut data[TX_SZ - 4..], crc);

        cobs::encode(&data, buf);

        *resources.TX = Some(Either::Right(tx.write_all(c, buf)));

        *resources.SAMPLES += 1;
        if *resources.SAMPLES >= SAMPLES {
            *resources.SAMPLES = 0;
            asm::bkpt();
        }
    }
};
