//! Blinks an LED

#![deny(unsafe_code)]
#![deny(warnings)]
#![no_main]
#![no_std]

extern crate panic_halt;

use stm32f103xx_hal::{
    prelude::*,
    gpio::{
        gpioc::PC13,
        Output, PushPull,
    },
    timer::{Event, Timer},
};
use rtfm::app;

#[app(device = stm32f103xx_hal::device)]
const APP: () = {
    static mut LED: PC13<Output<PushPull>> = ();

    #[init]
    fn init() {
        let mut flash = device.FLASH.constrain();
        let mut rcc = device.RCC.constrain();

        let clocks = rcc.cfgr.freeze(&mut flash.acr);

        let mut gpioc = device.GPIOC.split(&mut rcc.apb2);
        let led = gpioc.pc13.into_push_pull_output(&mut gpioc.crh);

        Timer::syst(core.SYST, 1.hz(), clocks).listen(Event::Update);

        LED = led;
    }

    #[interrupt(resources = [LED])]
    fn SysTick() {
        if resources.LED.is_low() {
            resources.LED.set_high()
        } else {
            resources.LED.set_low()
        }
    }
};
